@use "sass:color";
@import 'mixins';
//@import 'switches';
$angleTriangle: 90deg;
$angleRotation: 20deg;
$rayon: 1.2rem;
$clr-1: hsl(300, 100%, 50%);
$clr-2: hsl(120, 61%, 50%);


*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --fondPage: hsl(45, 21%, 93%);
  --clr-1: #{$clr-1};
  --clr-2: #{$clr-2};
  --clr-grey: 0, 0%, 40%;
  --rad: 0.4rem;


  --rayon-knob: #{$rayon};
  --angleRotation: #{$angleRotation};

  --bsh: 0px 0px 2px rgba(0, 0, 0, .5);

  --transition-error: .25s ease-in-out;
}

html {
  font-family: sans-serif;
  @include mq('max', $phone){
    font-size: 12px;
  }
  @include mq($phone, $tablet){
    font-size: 14px;
  }
  @include mq($tablet, $desktop-large){
    font-size: 16px;
  }
  @include mq('min', $desktop-large){
    font-size: 18px;
  }
}

body {
  background-color: var(--fondPage);
  min-height: 100vh;
  text-rendering: optimizeLegibility;
  @include grid-center;
}

main {
  width: Min(calc(100vw - 2em), 800px);
  min-width: 345px;
  display: grid;
  row-gap: 1.6em;
  padding: 2rem;
  background-color: #fff;
  border-radius: .5rem;
  box-shadow: 0 0 1rem rgba(0,0,0,.25);

  &.error{
    // animation transition de l'affichage du message d'erreur
    & #leHex{
      margin-top: 4rem;
    }

    & #errorMessage{
      opacity: 1;
      top: -3rem;
    }
  }

  &.disabled .col{
    & label{
      color: #a982a9;
    }
    
    & input[type="text"]{
      border-color: #a982a9;
    }
    & button{
      background-color: #a982a9;
    }
  }
}

label,
button {
  cursor: pointer;
}

:focus:not(:focus-visible) { outline: none }

.hidden {
  position: absolute;
  left: -100vw;
}

#errorMessage,
#leHex{
  grid-area: 2 / 1;
}

#leHex{
  margin-top: 0;
  z-index: 10;
  transition: margin-top var(--transition-error);
}


#errorMessage{
  --bdr: 2px;
  --h: .6em;
  --clr-bdr: red;
  --bgc: #fff;
  width: max(40ch, 50%);
  position: relative;
  top: 0;
  padding: 1em;
  margin: auto;
  border: var(--bdr) solid var(--clr-bdr);
  border-radius: .5em;
  background-color: var(--bgc);
  filter: drop-shadow(0 0 4px var(--clr-bdr));
  opacity: 0;
  z-index: 1;
  transition: opacity var(--transition-error),
              top var(--transition-error);

  &::before,
  &::after{
    position: absolute;
    content: '';
    @include size(0);
    left: 2em;
    border-style: solid;
    border-width: 0 var(--h) var(--h) var(--h);
  }
  
  &::before{
    top: calc(var(--h) * -1);
    border-color: transparent transparent var(--clr-bdr) transparent;
  }
  
  &::after{
    top: calc(var(--h) * -1 + var(--bdr) * 1.414);
    border-color: transparent transparent var(--bgc) transparent;
  }

  & span{
    padding: .125em .25em;
    font-family: monospace;
    color: #fff;
    background-color: var(--clr-1);
    border-radius: .25em;
  }
}

/// ------------------------------------------------- Colors inputs
#leInput{
  grid-template: auto 1fr / 1fr;
}
#clr-input{
  width: 80%;
  margin: 0 auto;
  border-width: 2px;
  border-top-right-radius:  var(--rad);
  border-bottom-right-radius:  var(--rad);
}

.col {
  display: grid;
  grid-template-columns: minmax(0, 1fr) auto;

  label {
    grid-area: 1 / 1 / 2 /3;
    font-family: sans-serif;
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--clr-1);
    text-transform: uppercase;
  }

  button {
    grid-area: 2 / 2 / 3 / 3;
    -webkit-appearance: none;
    appearance: none;
    padding: 0 .8rem;
    border: 0;
    border-top-right-radius: var(--rad);
    border-bottom-right-radius: var(--rad);
    background-color: var(--clr-1);
    font-family: sans-serif;
    font-size: 2rem;
    color: #fff;
    transition: background-color .125s ease-in-out;
    
    &:hover{
      background-color: color.scale($clr-1, $lightness: -40%);
    }
    
    &.copied{
      background-color: var(--clr-2);
    }

  }

  &:focus-within > :not(label){
    box-shadow: 0 0 4px 4px green;
  }
}

input[type="text"] {
  grid-area: 2 / 1 / 3 / 2;
  -webkit-appearance: none;
  appearance: none;
  padding: .25rem .5rem;
  font-family: "JetBrains Mono", monospace;
  font-size: 2rem;
  line-height: 1;
  color: var(--clr-1);
  border-style: solid;
  border-width: 1px;
  border-color: var(--clr-1);
  border-radius: var(--rad);
  border-right-width: 0;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;

  &:focus {
    font-size: 2rem; // empêche le zoom sur l'input quand il a le focus sur IOS
    outline: 0;
    // box-shadow: 0 0 8px rebeccapurple;
  }
}

/// ---------------------------------------------------------- Settings
#settings{
  display: grid;
  grid-template: auto / 1fr;
  grid-auto-flow: row;
  row-gap: 1em;
  @include mq('min', $tablet) {
    grid-template: 1fr 1fr / 1fr 1fr;
    grid-auto-flow: column;
    row-gap: 2em;
  }
  justify-items: center;
  column-gap: 2em;
  width: clamp(#{$phone}, 100vw, 800px);
  left: 50%;
  transform: translateX(-50%);
  background-color: hsl(45, 10%, 80%);
  padding: 4rem 2em;

  & .ligne{
    width: calc(100% - 4em);
    display: grid;
    grid-template-columns: 1fr 8rem;
    align-items: center;
    gap: 1em;

    & > * + *{
      // aligne le 2e enfant à droite
      justify-self: end;
    }

    & span{
      font-size: .875em;
      font-weight: 100;
    }
  }
}

// 1) Knobs ----------------------------
.knob_wrap {
  display: grid;
  grid-template-columns: #{$rayon * 2} 1fr;
  grid-template-rows: 1fr 1fr;
  gap: 1em;
}

.knob {
  grid-area: 1 / 1 / 3 / 2;
  @include grid-center;
  z-index: 1;

  & label {
    @include size($rayon * 2);
    position: relative;
    background-color: var(--clr-1);
    border-radius: 50%;

    &::before,
    &::after {
      content: '';
      position: absolute;
      transition: transform .25s ease-in-out;
    }

    &::before {
      // Curseur knob
      --haut: 4px;
      width: var(--rayon-knob);
      height: var(--haut);
      top: 50%;
      left: 50%;
      transform: translateY(-50%) rotate(var(--angleRotation));
      transform-origin: 0 50%;
      border-radius: calc(var(--haut) / 2);
      background-color: hsla(0, 0%, 100%, .45);
    }

    &::after {
      // Pointe
      @include size(0);
      @include triangle($rayon, $angleTriangle, var(--clr-1));
      transform: translateY(-50%) rotate(var(--angleRotation));
      z-index: -1;
    }
  }

  .checkbox:checked~label {
    background-color: var(--clr-1);

    &::before,
    &::after {
      transform: translatey(-50%) rotate(calc(var(--angleRotation) * -1));
    }

    &::after {
      border-color: transparent transparent transparent var(--clr-1);
    }
  }
}

.choice {
  justify-self: start;
  align-self: center;
  font-family: sans-serif;
  // font-size: 1.2rem;
  color: var(--clr-1);

  &.disabled {
    color: rgb(167, 167, 167);
  }
}

// 2) Toggle switches ----------------------------
.toggle {
  label {
    --w: 4.2rem;
    --h: 2rem;
    --m: .2rem; // "margin"
    display: block;
    position: relative;
    width: var(--w);
    height: var(--h);
    border-radius: calc(var(--h) / 2);
    background-color: hsl(var(--clr-grey));
    transition: background-color .25s linear;
    box-shadow: var(--bsh) inset;

    &::before,
    &::after {
      content: '';
      position: absolute;
      border-radius: 50%;
      transition: left .125s linear;
    }

    &::before{
      width: calc(var(--h) - (var(--m) * 2));
      height: calc(var(--h) - (var(--m) * 2));
      background: #fff;
      top: var(--m);
      left: var(--m);
      box-shadow: var(--bsh);
    }

    &:focus::after,
    &:hover::after{
      --l: 8px;
      @include size(var(--l));
      top: calc(var(--h)/2 - var(--l)/2);
      left: calc(var(--h)/2 - var(--l)/2);
      background-color: hsla(var(--clr-grey), .5);
      z-index: 100;
    }
  }

  input:checked+label {
    background-color: var(--clr-1);

    &::before {
      left: calc(var(--w) - ((var(--h) - var(--m))));
    }

    &:focus::after,
    &:hover::after{
      left: calc(var(--w) - ((var(--h)/2 + var(--m))));
    }
  }
}

/// Cog
#cog{
  position: fixed;
  right: 1rem;
  bottom: 1rem;
  @include size(3rem);
  border-radius: 50%;
  background-color: hsl(var(--clr-grey));
  background-image: url('data:image/svg+xml;utf8,<svg enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="m0 0h24v24h-24z" fill="none"/><path d="m19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22l-1.91 3.32c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61zm-7.14 2.66c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"/></svg>');
  background-repeat: no-repeat;
  background-size: cover;
  cursor: pointer;

  &::after{
    --offset: -6px;
    content: '';
    position: absolute;
    top: var(--offset);
    left: var(--offset);
    right: var(--offset);
    bottom: var(--offset);
    border: calc(var(--offset) / -2) solid hsl(var(--clr-grey));
    border-radius: inherit;
  }

  &:hover{
    background-color: var(--clr-1);

    &::after{
      border-color: var(--clr-1);
    }
  }
}